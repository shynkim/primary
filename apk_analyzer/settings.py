"""
Django settings for apk_analyzer project.
Generated by 'django-admin startproject' using Django 4.2.7.
"""

from pathlib import Path
import os

# ─────────────────────────────────────────────────────────────────────────────
# Paths
# ─────────────────────────────────────────────────────────────────────────────
BASE_DIR = Path(__file__).resolve().parent.parent

# ─────────────────────────────────────────────────────────────────────────────
# Security (개발용 기본값)
# ─────────────────────────────────────────────────────────────────────────────
SECRET_KEY = 'django-insecure-xl2^t^@7j=iay8elrwl80*5f(1_asgs-%i*+kkr+4kgd(y+ul3'
DEBUG = True

# 개발 중엔 로컬/컨테이너 IP 허용
ALLOWED_HOSTS = ["127.0.0.1", "localhost", "[::1]"]

# 배포 시: NCP 공인 IP/도메인 추가
# ALLOWED_HOSTS += ["your.server.ip", "your-domain.com"]

# CSRF: 템플릿에서 {% csrf_token %}을 쓰므로 기본 동작 OK
# 배포 시 프록시/도메인 맞춰서 신뢰 출처 지정
# CSRF_TRUSTED_ORIGINS = [
#     "http://your.server.ip",
#     "https://your-domain.com",
# ]

# Nginx 리버스 프록시 뒤라면 권장
# USE_X_FORWARDED_HOST = True
# SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# ─────────────────────────────────────────────────────────────────────────────
# Apps
# ─────────────────────────────────────────────────────────────────────────────
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'analyzer',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'apk_analyzer.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 별도 전역 템플릿 디렉토리를 쓰지 않는다면 비워두고, app templates 사용
        'DIRS': [
            # BASE_DIR / "templates",  # 전역 templates 폴더가 있다면 주석 해제
        ],
        'APP_DIRS': True,  # analyzer/templates/ 인식
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'apk_analyzer.wsgi.application'

# ─────────────────────────────────────────────────────────────────────────────
# Database
# ─────────────────────────────────────────────────────────────────────────────
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

# ─────────────────────────────────────────────────────────────────────────────
# Password validation
# ─────────────────────────────────────────────────────────────────────────────
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',},
]

# ─────────────────────────────────────────────────────────────────────────────
# i18n / TZ (선택) — 한국 기준
# ─────────────────────────────────────────────────────────────────────────────
LANGUAGE_CODE = 'ko-kr'   # 'en-us' → 'ko-kr'
TIME_ZONE = 'Asia/Seoul'  # 'UTC' → 'Asia/Seoul'
USE_I18N = True
USE_TZ = True  # DB/내부 UTC, 표시/입력은 TIME_ZONE

# ─────────────────────────────────────────────────────────────────────────────
# Static / Media
# ─────────────────────────────────────────────────────────────────────────────
# 개발 서버: STATICFILES_DIRS 안의 파일을 서빙
STATIC_URL = 'static/'

STATICFILES_DIRS = [
    BASE_DIR / "static",  # 프론트 정적자원이 여기에 있으면 유지
]

# 배포 시 collectstatic 결과물 루트 (python manage.py collectstatic)
# Nginx로 /static/ 서빙 시 이 경로를 마운트
STATIC_ROOT = BASE_DIR / "staticfiles"

# 업로드 파일
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# 업로드 사이즈 제한(프론트 50MB와 맞춤)
FILE_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 50 * 1024 * 1024  # 50MB

# ─────────────────────────────────────────────────────────────────────────────
# ML artifacts / policy_predict.py 연동 핵심
# ─────────────────────────────────────────────────────────────────────────────
# policy_predict.py는 settings.OUT_PS_OVR_DIR 우선 → 없으면 BASE_DIR/out_ps_ovr 로 폴백
# 여기서 명시적으로 지정해주면 확실.
OUT_PS_OVR_DIR = BASE_DIR / "out_ps_ovr"

# (참고) 프로젝트에 ML_ART_DIR를 별도로 쓰고 있다면, 그 내부 서브폴더로도 지정 가능:
# ML_ART_DIR = BASE_DIR / "ml_artifacts"
# OUT_PS_OVR_DIR = ML_ART_DIR / "out_ps_ovr"

# ─────────────────────────────────────────────────────────────────────────────
# Logs (선택)
# ─────────────────────────────────────────────────────────────────────────────
# 개발 중엔 콘솔 로그로 충분. 배포 시 파일 핸들러 추가 가능.
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {"console": {"class": "logging.StreamHandler"}},
    "root": {"handlers": ["console"], "level": "INFO"},
}

# ─────────────────────────────────────────────────────────────────────────────
# Default PK
# ─────────────────────────────────────────────────────────────────────────────
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
